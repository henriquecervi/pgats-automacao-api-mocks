name: 🏦 Bank API CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Job 1: Lint and Security Check
  lint-and-security:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔒 Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: 📊 Check for outdated packages
      run: npm outdated
      continue-on-error: true

  # Job 2: Test Suite
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: lint-and-security
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏃‍♂️ Run all tests
      run: npm test
      
    - name: 📈 Generate detailed test report
      if: matrix.node-version == '18'
      run: npm run test:report
      
    - name: 📊 Upload test results (backup)
      if: matrix.node-version == '18'
      uses: actions/upload-artifact@v4
      with:
        name: test-report-backup
        path: test-results/
        retention-days: 7
        
    - name: 💾 Upload test coverage (if available)
      if: matrix.node-version == '18'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30
      continue-on-error: true

  # Job 3: Service Tests by Category
  test-categories:
    name: 🎯 Test Categories
    runs-on: ubuntu-latest
    needs: lint-and-security
    
    strategy:
      matrix:
        test-type: [controllers, services, integration, system]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🧪 Run ${{ matrix.test-type }} tests
      run: npm run test:${{ matrix.test-type }}

  # Job 4: API Health Check
  api-health-check:
    name: 🏥 API Health Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🚀 Start API server in background
      run: |
        npm start &
        echo $! > server.pid
        sleep 5
        
    - name: 🏥 Check API health endpoint
      run: |
        curl -f http://localhost:3000/health || exit 1
        echo "✅ API Health Check passed!"
        
    - name: 📚 Check Swagger documentation
      run: |
        curl -f http://localhost:3000/api-docs/ || exit 1
        echo "✅ Swagger documentation is accessible!"
        
    - name: 🔗 Check Swagger JSON
      run: |
        curl -f http://localhost:3000/swagger.json || exit 1
        echo "✅ Swagger JSON is valid!"
        
    - name: 🛑 Stop API server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

  # Job 5: Build and Package
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [test, test-categories, api-health-check]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci --only=production
      
    - name: 📋 Generate build info
      run: |
        echo "🏗️ Build completed successfully!" > build-info.txt
        echo "📅 Build date: $(date)" >> build-info.txt
        echo "🔖 Git commit: ${{ github.sha }}" >> build-info.txt
        echo "🌿 Git branch: ${{ github.ref_name }}" >> build-info.txt
        echo "👤 Triggered by: ${{ github.actor }}" >> build-info.txt
        
    - name: 📊 Create package info
      run: |
        echo "📦 Package contents:" >> build-info.txt
        ls -la >> build-info.txt
        
    - name: 💾 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: banco-api-build
        path: |
          .
          !node_modules
          !.git
          !test-results
          !coverage
        retention-days: 30

  # Job 6: Notification and Summary
  notify:
    name: 📢 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [lint-and-security, test, test-categories, api-health-check, build]
    if: always()
    
    steps:
    - name: 📊 Pipeline Summary
      run: |
        echo "🏦 ===== BANCO API CI/CD PIPELINE SUMMARY ====="
        echo ""
        echo "🔍 Code Quality & Security: ${{ needs.lint-and-security.result }}"
        echo "🧪 Test Suite: ${{ needs.test.result }}"
        echo "🎯 Test Categories: ${{ needs.test-categories.result }}"
        echo "🏥 API Health Check: ${{ needs.api-health-check.result }}"
        echo "🏗️ Build & Package: ${{ needs.build.result }}"
        echo ""
        echo "📅 Pipeline executed on: $(date)"
        echo "🔖 Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo ""
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ Pipeline completed successfully! 🎉"
          echo "🚀 Ready for deployment!"
        else
          echo "❌ Pipeline failed! Please check the logs."
          exit 1
        fi
